// source: block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var tx_pb = require('./tx_pb.js');
goog.object.extend(proto, tx_pb);
goog.exportSymbol('proto.push.Block', null, global);
goog.exportSymbol('proto.push.DidMapping', null, global);
goog.exportSymbol('proto.push.Role', null, global);
goog.exportSymbol('proto.push.Signer', null, global);
goog.exportSymbol('proto.push.TransactionObj', null, global);
goog.exportSymbol('proto.push.TxAttestorData', null, global);
goog.exportSymbol('proto.push.TxValidatorData', null, global);
goog.exportSymbol('proto.push.Vote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.DidMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.DidMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.DidMapping.displayName = 'proto.push.DidMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.TxValidatorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.TxValidatorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.TxValidatorData.displayName = 'proto.push.TxValidatorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.TxAttestorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.TxAttestorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.TxAttestorData.displayName = 'proto.push.TxAttestorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.TransactionObj = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.TransactionObj.repeatedFields_, null);
};
goog.inherits(proto.push.TransactionObj, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.TransactionObj.displayName = 'proto.push.TransactionObj';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.Signer.displayName = 'proto.push.Signer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.Block.repeatedFields_, null);
};
goog.inherits(proto.push.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.Block.displayName = 'proto.push.Block';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.DidMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.push.DidMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.DidMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.DidMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    didmappingMap: (f = msg.getDidmappingMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.DidMapping}
 */
proto.push.DidMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.DidMapping;
  return proto.push.DidMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.DidMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.DidMapping}
 */
proto.push.DidMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDidmappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.DidMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.DidMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.DidMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.DidMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDidmappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> didMapping = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.push.DidMapping.prototype.getDidmappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.push.DidMapping} returns this
 */
proto.push.DidMapping.prototype.clearDidmappingMap = function() {
  this.getDidmappingMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.TxValidatorData.prototype.toObject = function(opt_includeInstance) {
  return proto.push.TxValidatorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.TxValidatorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TxValidatorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: jspb.Message.getFieldWithDefault(msg, 1, 0),
    didmapping: (f = msg.getDidmapping()) && proto.push.DidMapping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.TxValidatorData}
 */
proto.push.TxValidatorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.TxValidatorData;
  return proto.push.TxValidatorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.TxValidatorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.TxValidatorData}
 */
proto.push.TxValidatorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.push.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    case 2:
      var value = new proto.push.DidMapping;
      reader.readMessage(value,proto.push.DidMapping.deserializeBinaryFromReader);
      msg.setDidmapping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.TxValidatorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.TxValidatorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.TxValidatorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TxValidatorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDidmapping();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.DidMapping.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vote vote = 1;
 * @return {!proto.push.Vote}
 */
proto.push.TxValidatorData.prototype.getVote = function() {
  return /** @type {!proto.push.Vote} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.push.Vote} value
 * @return {!proto.push.TxValidatorData} returns this
 */
proto.push.TxValidatorData.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DidMapping didMapping = 2;
 * @return {?proto.push.DidMapping}
 */
proto.push.TxValidatorData.prototype.getDidmapping = function() {
  return /** @type{?proto.push.DidMapping} */ (
    jspb.Message.getWrapperField(this, proto.push.DidMapping, 2));
};


/**
 * @param {?proto.push.DidMapping|undefined} value
 * @return {!proto.push.TxValidatorData} returns this
*/
proto.push.TxValidatorData.prototype.setDidmapping = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.TxValidatorData} returns this
 */
proto.push.TxValidatorData.prototype.clearDidmapping = function() {
  return this.setDidmapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.TxValidatorData.prototype.hasDidmapping = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.TxAttestorData.prototype.toObject = function(opt_includeInstance) {
  return proto.push.TxAttestorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.TxAttestorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TxAttestorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.TxAttestorData}
 */
proto.push.TxAttestorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.TxAttestorData;
  return proto.push.TxAttestorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.TxAttestorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.TxAttestorData}
 */
proto.push.TxAttestorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.push.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.TxAttestorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.TxAttestorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.TxAttestorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TxAttestorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Vote vote = 1;
 * @return {!proto.push.Vote}
 */
proto.push.TxAttestorData.prototype.getVote = function() {
  return /** @type {!proto.push.Vote} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.push.Vote} value
 * @return {!proto.push.TxAttestorData} returns this
 */
proto.push.TxAttestorData.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.TransactionObj.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.TransactionObj.prototype.toObject = function(opt_includeInstance) {
  return proto.push.TransactionObj.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.TransactionObj} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TransactionObj.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && tx_pb.Transaction.toObject(includeInstance, f),
    validatordata: (f = msg.getValidatordata()) && proto.push.TxValidatorData.toObject(includeInstance, f),
    attestordataList: jspb.Message.toObjectList(msg.getAttestordataList(),
    proto.push.TxAttestorData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.TransactionObj}
 */
proto.push.TransactionObj.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.TransactionObj;
  return proto.push.TransactionObj.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.TransactionObj} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.TransactionObj}
 */
proto.push.TransactionObj.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tx_pb.Transaction;
      reader.readMessage(value,tx_pb.Transaction.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = new proto.push.TxValidatorData;
      reader.readMessage(value,proto.push.TxValidatorData.deserializeBinaryFromReader);
      msg.setValidatordata(value);
      break;
    case 3:
      var value = new proto.push.TxAttestorData;
      reader.readMessage(value,proto.push.TxAttestorData.deserializeBinaryFromReader);
      msg.addAttestordata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.TransactionObj.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.TransactionObj.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.TransactionObj} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.TransactionObj.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tx_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getValidatordata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.TxValidatorData.serializeBinaryToWriter
    );
  }
  f = message.getAttestordataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.TxAttestorData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction tx = 1;
 * @return {?proto.push.Transaction}
 */
proto.push.TransactionObj.prototype.getTx = function() {
  return /** @type{?proto.push.Transaction} */ (
    jspb.Message.getWrapperField(this, tx_pb.Transaction, 1));
};


/**
 * @param {?proto.push.Transaction|undefined} value
 * @return {!proto.push.TransactionObj} returns this
*/
proto.push.TransactionObj.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.TransactionObj} returns this
 */
proto.push.TransactionObj.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.TransactionObj.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxValidatorData validatorData = 2;
 * @return {?proto.push.TxValidatorData}
 */
proto.push.TransactionObj.prototype.getValidatordata = function() {
  return /** @type{?proto.push.TxValidatorData} */ (
    jspb.Message.getWrapperField(this, proto.push.TxValidatorData, 2));
};


/**
 * @param {?proto.push.TxValidatorData|undefined} value
 * @return {!proto.push.TransactionObj} returns this
*/
proto.push.TransactionObj.prototype.setValidatordata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.TransactionObj} returns this
 */
proto.push.TransactionObj.prototype.clearValidatordata = function() {
  return this.setValidatordata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.TransactionObj.prototype.hasValidatordata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TxAttestorData attestorData = 3;
 * @return {!Array<!proto.push.TxAttestorData>}
 */
proto.push.TransactionObj.prototype.getAttestordataList = function() {
  return /** @type{!Array<!proto.push.TxAttestorData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.TxAttestorData, 3));
};


/**
 * @param {!Array<!proto.push.TxAttestorData>} value
 * @return {!proto.push.TransactionObj} returns this
*/
proto.push.TransactionObj.prototype.setAttestordataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.TxAttestorData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.TxAttestorData}
 */
proto.push.TransactionObj.prototype.addAttestordata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.TxAttestorData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.TransactionObj} returns this
 */
proto.push.TransactionObj.prototype.clearAttestordataList = function() {
  return this.setAttestordataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.push.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sig: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.Signer}
 */
proto.push.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.Signer;
  return proto.push.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.Signer}
 */
proto.push.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {!proto.push.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSig();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string node = 1;
 * @return {string}
 */
proto.push.Signer.prototype.getNode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.Signer} returns this
 */
proto.push.Signer.prototype.setNode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Role role = 2;
 * @return {!proto.push.Role}
 */
proto.push.Signer.prototype.getRole = function() {
  return /** @type {!proto.push.Role} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.push.Role} value
 * @return {!proto.push.Signer} returns this
 */
proto.push.Signer.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sig = 3;
 * @return {string}
 */
proto.push.Signer.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.Signer} returns this
 */
proto.push.Signer.prototype.setSig = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.Block.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.push.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txobjList: jspb.Message.toObjectList(msg.getTxobjList(),
    proto.push.TransactionObj.toObject, includeInstance),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.push.Signer.toObject, includeInstance),
    attesttoken: msg.getAttesttoken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.Block}
 */
proto.push.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.Block;
  return proto.push.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.Block}
 */
proto.push.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTs(value);
      break;
    case 2:
      var value = new proto.push.TransactionObj;
      reader.readMessage(value,proto.push.TransactionObj.deserializeBinaryFromReader);
      msg.addTxobj(value);
      break;
    case 3:
      var value = new proto.push.Signer;
      reader.readMessage(value,proto.push.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttesttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxobjList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.push.TransactionObj.serializeBinaryToWriter
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.Signer.serializeBinaryToWriter
    );
  }
  f = message.getAttesttoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 ts = 1;
 * @return {number}
 */
proto.push.Block.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.Block} returns this
 */
proto.push.Block.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated TransactionObj txObj = 2;
 * @return {!Array<!proto.push.TransactionObj>}
 */
proto.push.Block.prototype.getTxobjList = function() {
  return /** @type{!Array<!proto.push.TransactionObj>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.TransactionObj, 2));
};


/**
 * @param {!Array<!proto.push.TransactionObj>} value
 * @return {!proto.push.Block} returns this
*/
proto.push.Block.prototype.setTxobjList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.push.TransactionObj=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.TransactionObj}
 */
proto.push.Block.prototype.addTxobj = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.push.TransactionObj, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.Block} returns this
 */
proto.push.Block.prototype.clearTxobjList = function() {
  return this.setTxobjList([]);
};


/**
 * repeated Signer signers = 3;
 * @return {!Array<!proto.push.Signer>}
 */
proto.push.Block.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.push.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.Signer, 3));
};


/**
 * @param {!Array<!proto.push.Signer>} value
 * @return {!proto.push.Block} returns this
*/
proto.push.Block.prototype.setSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.Signer}
 */
proto.push.Block.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.Signer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.Block} returns this
 */
proto.push.Block.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * optional bytes attestToken = 4;
 * @return {!(string|Uint8Array)}
 */
proto.push.Block.prototype.getAttesttoken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes attestToken = 4;
 * This is a type-conversion wrapper around `getAttesttoken()`
 * @return {string}
 */
proto.push.Block.prototype.getAttesttoken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttesttoken()));
};


/**
 * optional bytes attestToken = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttesttoken()`
 * @return {!Uint8Array}
 */
proto.push.Block.prototype.getAttesttoken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttesttoken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.Block} returns this
 */
proto.push.Block.prototype.setAttesttoken = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.push.Role = {
  ROLE_UNSPECIFIED: 0,
  VALIDATOR: 1,
  ATTESTER: 2
};

/**
 * @enum {number}
 */
proto.push.Vote = {
  VOTE_UNSPECIFIED: 0,
  ACCEPTED: 1,
  REJECTED: 2
};

goog.object.extend(exports, proto.push);
