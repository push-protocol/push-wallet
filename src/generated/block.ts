// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.20.3
// source: block.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Transaction } from "./tx";

export const protobufPackage = "push";

export enum Role {
  ROLE_UNSPECIFIED = 0,
  VALIDATOR = 1,
  ATTESTER = 2,
  UNRECOGNIZED = -1,
}

export function roleFromJSON(object: any): Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return Role.ROLE_UNSPECIFIED;
    case 1:
    case "VALIDATOR":
      return Role.VALIDATOR;
    case 2:
    case "ATTESTER":
      return Role.ATTESTER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Role.UNRECOGNIZED;
  }
}

export function roleToJSON(object: Role): string {
  switch (object) {
    case Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case Role.VALIDATOR:
      return "VALIDATOR";
    case Role.ATTESTER:
      return "ATTESTER";
    case Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Vote {
  VOTE_UNSPECIFIED = 0,
  ACCEPTED = 1,
  REJECTED = 2,
  UNRECOGNIZED = -1,
}

export function voteFromJSON(object: any): Vote {
  switch (object) {
    case 0:
    case "VOTE_UNSPECIFIED":
      return Vote.VOTE_UNSPECIFIED;
    case 1:
    case "ACCEPTED":
      return Vote.ACCEPTED;
    case 2:
    case "REJECTED":
      return Vote.REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Vote.UNRECOGNIZED;
  }
}

export function voteToJSON(object: Vote): string {
  switch (object) {
    case Vote.VOTE_UNSPECIFIED:
      return "VOTE_UNSPECIFIED";
    case Vote.ACCEPTED:
      return "ACCEPTED";
    case Vote.REJECTED:
      return "REJECTED";
    case Vote.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DidMapping {
  didMapping: { [key: string]: string };
}

export interface DidMapping_DidMappingEntry {
  key: string;
  value: string;
}

/** section added by a block producer (we call him Validator in the context of the block) */
export interface TxValidatorData {
  /** any validator can vote if he supports the tx or not */
  vote: Vote;
  /**
   * additional context goes below.
   * if it is signed = all attestors agree with this context of tx processing
   */
  didMapping: DidMapping | undefined;
}

/**
 * section added by a block attester
 * offset0 = block producer vote
 * offset1..N = block attestor votes
 */
export interface TxAttestorData {
  /** any attestor can vote if he supports the tx or not */
  vote: Vote;
}

/** transaction with voting data */
export interface TransactionObj {
  /** raw bytes: you need to decode this based on category into a Transaciton */
  tx:
    | Transaction
    | undefined;
  /** validator(block producer) processes 'data' field and fills this output */
  validatorData:
    | TxValidatorData
    | undefined;
  /** attestors process 'data' and 'metaData' and fill this output */
  attestorData: TxAttestorData[];
}

export interface Signer {
  node: string;
  role: Role;
  sig: string;
}

export interface Block {
  /** block timestamp in millis; */
  ts: number;
  txObj: TransactionObj[];
  signers: Signer[];
  attestToken: Uint8Array;
}

function createBaseDidMapping(): DidMapping {
  return { didMapping: {} };
}

export const DidMapping = {
  encode(message: DidMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.didMapping).forEach(([key, value]) => {
      DidMapping_DidMappingEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DidMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDidMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = DidMapping_DidMappingEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.didMapping[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DidMapping {
    return {
      didMapping: isObject(object.didMapping)
        ? Object.entries(object.didMapping).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DidMapping): unknown {
    const obj: any = {};
    if (message.didMapping) {
      const entries = Object.entries(message.didMapping);
      if (entries.length > 0) {
        obj.didMapping = {};
        entries.forEach(([k, v]) => {
          obj.didMapping[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DidMapping>, I>>(base?: I): DidMapping {
    return DidMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DidMapping>, I>>(object: I): DidMapping {
    const message = createBaseDidMapping();
    message.didMapping = Object.entries(object.didMapping ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDidMapping_DidMappingEntry(): DidMapping_DidMappingEntry {
  return { key: "", value: "" };
}

export const DidMapping_DidMappingEntry = {
  encode(message: DidMapping_DidMappingEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DidMapping_DidMappingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDidMapping_DidMappingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DidMapping_DidMappingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DidMapping_DidMappingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DidMapping_DidMappingEntry>, I>>(base?: I): DidMapping_DidMappingEntry {
    return DidMapping_DidMappingEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DidMapping_DidMappingEntry>, I>>(object: I): DidMapping_DidMappingEntry {
    const message = createBaseDidMapping_DidMappingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTxValidatorData(): TxValidatorData {
  return { vote: 0, didMapping: undefined };
}

export const TxValidatorData = {
  encode(message: TxValidatorData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vote !== 0) {
      writer.uint32(8).int32(message.vote);
    }
    if (message.didMapping !== undefined) {
      DidMapping.encode(message.didMapping, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxValidatorData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxValidatorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vote = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.didMapping = DidMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxValidatorData {
    return {
      vote: isSet(object.vote) ? voteFromJSON(object.vote) : 0,
      didMapping: isSet(object.didMapping) ? DidMapping.fromJSON(object.didMapping) : undefined,
    };
  },

  toJSON(message: TxValidatorData): unknown {
    const obj: any = {};
    if (message.vote !== 0) {
      obj.vote = voteToJSON(message.vote);
    }
    if (message.didMapping !== undefined) {
      obj.didMapping = DidMapping.toJSON(message.didMapping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TxValidatorData>, I>>(base?: I): TxValidatorData {
    return TxValidatorData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TxValidatorData>, I>>(object: I): TxValidatorData {
    const message = createBaseTxValidatorData();
    message.vote = object.vote ?? 0;
    message.didMapping = (object.didMapping !== undefined && object.didMapping !== null)
      ? DidMapping.fromPartial(object.didMapping)
      : undefined;
    return message;
  },
};

function createBaseTxAttestorData(): TxAttestorData {
  return { vote: 0 };
}

export const TxAttestorData = {
  encode(message: TxAttestorData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vote !== 0) {
      writer.uint32(8).int32(message.vote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxAttestorData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxAttestorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vote = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxAttestorData {
    return { vote: isSet(object.vote) ? voteFromJSON(object.vote) : 0 };
  },

  toJSON(message: TxAttestorData): unknown {
    const obj: any = {};
    if (message.vote !== 0) {
      obj.vote = voteToJSON(message.vote);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TxAttestorData>, I>>(base?: I): TxAttestorData {
    return TxAttestorData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TxAttestorData>, I>>(object: I): TxAttestorData {
    const message = createBaseTxAttestorData();
    message.vote = object.vote ?? 0;
    return message;
  },
};

function createBaseTransactionObj(): TransactionObj {
  return { tx: undefined, validatorData: undefined, attestorData: [] };
}

export const TransactionObj = {
  encode(message: TransactionObj, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx !== undefined) {
      Transaction.encode(message.tx, writer.uint32(10).fork()).join();
    }
    if (message.validatorData !== undefined) {
      TxValidatorData.encode(message.validatorData, writer.uint32(18).fork()).join();
    }
    for (const v of message.attestorData) {
      TxAttestorData.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionObj {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionObj();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx = Transaction.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validatorData = TxValidatorData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attestorData.push(TxAttestorData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionObj {
    return {
      tx: isSet(object.tx) ? Transaction.fromJSON(object.tx) : undefined,
      validatorData: isSet(object.validatorData) ? TxValidatorData.fromJSON(object.validatorData) : undefined,
      attestorData: globalThis.Array.isArray(object?.attestorData)
        ? object.attestorData.map((e: any) => TxAttestorData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TransactionObj): unknown {
    const obj: any = {};
    if (message.tx !== undefined) {
      obj.tx = Transaction.toJSON(message.tx);
    }
    if (message.validatorData !== undefined) {
      obj.validatorData = TxValidatorData.toJSON(message.validatorData);
    }
    if (message.attestorData?.length) {
      obj.attestorData = message.attestorData.map((e) => TxAttestorData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionObj>, I>>(base?: I): TransactionObj {
    return TransactionObj.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionObj>, I>>(object: I): TransactionObj {
    const message = createBaseTransactionObj();
    message.tx = (object.tx !== undefined && object.tx !== null) ? Transaction.fromPartial(object.tx) : undefined;
    message.validatorData = (object.validatorData !== undefined && object.validatorData !== null)
      ? TxValidatorData.fromPartial(object.validatorData)
      : undefined;
    message.attestorData = object.attestorData?.map((e) => TxAttestorData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSigner(): Signer {
  return { node: "", role: 0, sig: "" };
}

export const Signer = {
  encode(message: Signer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== "") {
      writer.uint32(10).string(message.node);
    }
    if (message.role !== 0) {
      writer.uint32(16).int32(message.role);
    }
    if (message.sig !== "") {
      writer.uint32(26).string(message.sig);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Signer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.node = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sig = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Signer {
    return {
      node: isSet(object.node) ? globalThis.String(object.node) : "",
      role: isSet(object.role) ? roleFromJSON(object.role) : 0,
      sig: isSet(object.sig) ? globalThis.String(object.sig) : "",
    };
  },

  toJSON(message: Signer): unknown {
    const obj: any = {};
    if (message.node !== "") {
      obj.node = message.node;
    }
    if (message.role !== 0) {
      obj.role = roleToJSON(message.role);
    }
    if (message.sig !== "") {
      obj.sig = message.sig;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Signer>, I>>(base?: I): Signer {
    return Signer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Signer>, I>>(object: I): Signer {
    const message = createBaseSigner();
    message.node = object.node ?? "";
    message.role = object.role ?? 0;
    message.sig = object.sig ?? "";
    return message;
  },
};

function createBaseBlock(): Block {
  return { ts: 0, txObj: [], signers: [], attestToken: new Uint8Array(0) };
}

export const Block = {
  encode(message: Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ts !== 0) {
      writer.uint32(8).uint64(message.ts);
    }
    for (const v of message.txObj) {
      TransactionObj.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.signers) {
      Signer.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.attestToken.length !== 0) {
      writer.uint32(34).bytes(message.attestToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ts = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txObj.push(TransactionObj.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signers.push(Signer.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attestToken = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      ts: isSet(object.ts) ? globalThis.Number(object.ts) : 0,
      txObj: globalThis.Array.isArray(object?.txObj) ? object.txObj.map((e: any) => TransactionObj.fromJSON(e)) : [],
      signers: globalThis.Array.isArray(object?.signers) ? object.signers.map((e: any) => Signer.fromJSON(e)) : [],
      attestToken: isSet(object.attestToken) ? bytesFromBase64(object.attestToken) : new Uint8Array(0),
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.ts !== 0) {
      obj.ts = Math.round(message.ts);
    }
    if (message.txObj?.length) {
      obj.txObj = message.txObj.map((e) => TransactionObj.toJSON(e));
    }
    if (message.signers?.length) {
      obj.signers = message.signers.map((e) => Signer.toJSON(e));
    }
    if (message.attestToken.length !== 0) {
      obj.attestToken = base64FromBytes(message.attestToken);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.ts = object.ts ?? 0;
    message.txObj = object.txObj?.map((e) => TransactionObj.fromPartial(e)) || [];
    message.signers = object.signers?.map((e) => Signer.fromPartial(e)) || [];
    message.attestToken = object.attestToken ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
