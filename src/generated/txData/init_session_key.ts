// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.20.3
// source: txData/init_session_key.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "push";

export enum KeyAction {
  UNSPECIFIED = 0,
  PUBLISH_KEY = 1,
  REVOKE_KEY = 2,
  UNRECOGNIZED = -1,
}

export function keyActionFromJSON(object: any): KeyAction {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return KeyAction.UNSPECIFIED;
    case 1:
    case "PUBLISH_KEY":
      return KeyAction.PUBLISH_KEY;
    case 2:
    case "REVOKE_KEY":
      return KeyAction.REVOKE_KEY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeyAction.UNRECOGNIZED;
  }
}

export function keyActionToJSON(object: KeyAction): string {
  switch (object) {
    case KeyAction.UNSPECIFIED:
      return "UNSPECIFIED";
    case KeyAction.PUBLISH_KEY:
      return "PUBLISH_KEY";
    case KeyAction.REVOKE_KEY:
      return "REVOKE_KEY";
    case KeyAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SessionKeyAction {
  keyIndex: number;
  keyAddress: string;
  action: KeyAction;
}

function createBaseSessionKeyAction(): SessionKeyAction {
  return { keyIndex: 0, keyAddress: "", action: 0 };
}

export const SessionKeyAction = {
  encode(message: SessionKeyAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyIndex !== 0) {
      writer.uint32(8).int32(message.keyIndex);
    }
    if (message.keyAddress !== "") {
      writer.uint32(18).string(message.keyAddress);
    }
    if (message.action !== 0) {
      writer.uint32(24).int32(message.action);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionKeyAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionKeyAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.keyIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionKeyAction {
    return {
      keyIndex: isSet(object.keyIndex) ? globalThis.Number(object.keyIndex) : 0,
      keyAddress: isSet(object.keyAddress) ? globalThis.String(object.keyAddress) : "",
      action: isSet(object.action) ? keyActionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: SessionKeyAction): unknown {
    const obj: any = {};
    if (message.keyIndex !== 0) {
      obj.keyIndex = Math.round(message.keyIndex);
    }
    if (message.keyAddress !== "") {
      obj.keyAddress = message.keyAddress;
    }
    if (message.action !== 0) {
      obj.action = keyActionToJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionKeyAction>, I>>(base?: I): SessionKeyAction {
    return SessionKeyAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionKeyAction>, I>>(object: I): SessionKeyAction {
    const message = createBaseSessionKeyAction();
    message.keyIndex = object.keyIndex ?? 0;
    message.keyAddress = object.keyAddress ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
