// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.20.3
// source: txData/notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "push";

/** Encrypted Notificaiton */
export enum EncryptionType {
  ENCRYPTION_UNSPECIFIED = 0,
  ECC = 1,
  UNRECOGNIZED = -1,
}

export function encryptionTypeFromJSON(object: any): EncryptionType {
  switch (object) {
    case 0:
    case "ENCRYPTION_UNSPECIFIED":
      return EncryptionType.ENCRYPTION_UNSPECIFIED;
    case 1:
    case "ECC":
      return EncryptionType.ECC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncryptionType.UNRECOGNIZED;
  }
}

export function encryptionTypeToJSON(object: EncryptionType): string {
  switch (object) {
    case EncryptionType.ENCRYPTION_UNSPECIFIED:
      return "ENCRYPTION_UNSPECIFIED";
    case EncryptionType.ECC:
      return "ECC";
    case EncryptionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * PlainText Notification
 * represents a targeted notificaiton with up to 1000 recipients (this is defined by a top level transaction)
 */
export interface Notification {
  /** the app which sends the notif, i.e. "ShapeShift" */
  app: string;
  /** notification title, i.e. "ShapeShift - 2 PUFETH received!" */
  title: string;
  /** notification body, i.e. ""ðŸ“© Sender: 0x4bd5â€¦7170\nðŸ‘¤ Receiver: 0x121dâ€¦876e (you)\nðŸª™ Asset: PUFETH\nðŸ’° Amount: 2\n"" */
  body: string;
  /** TBD: clear definition of this field ???????????????????????????? */
  channelUrl: string;
  /** on click action, i.e. "https://etherscan.io/tx/0x3c93fd0617c5f7431d2899fa8e7ccea0ec09d4210a96c68b0fddf5772833871e" */
  actionUrl: string;
  /** big image url */
  img: string;
  /** small image url */
  icon: string;
}

export interface EncryptionDetails {
  recipientDID: string;
  type: EncryptionType;
  keyIndex: number;
  encryptedSecret: Uint8Array;
}

export interface EncryptedNotif {
  encryptedNotif: Uint8Array;
  sourceEnc: EncryptionDetails | undefined;
  targetEnc: EncryptionDetails[];
}

function createBaseNotification(): Notification {
  return { app: "", title: "", body: "", channelUrl: "", actionUrl: "", img: "", icon: "" };
}

export const Notification = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.app !== "") {
      writer.uint32(10).string(message.app);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(26).string(message.body);
    }
    if (message.channelUrl !== "") {
      writer.uint32(34).string(message.channelUrl);
    }
    if (message.actionUrl !== "") {
      writer.uint32(42).string(message.actionUrl);
    }
    if (message.img !== "") {
      writer.uint32(50).string(message.img);
    }
    if (message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.app = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channelUrl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actionUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.img = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      app: isSet(object.app) ? globalThis.String(object.app) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      channelUrl: isSet(object.channelUrl) ? globalThis.String(object.channelUrl) : "",
      actionUrl: isSet(object.actionUrl) ? globalThis.String(object.actionUrl) : "",
      img: isSet(object.img) ? globalThis.String(object.img) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.app !== "") {
      obj.app = message.app;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.channelUrl !== "") {
      obj.channelUrl = message.channelUrl;
    }
    if (message.actionUrl !== "") {
      obj.actionUrl = message.actionUrl;
    }
    if (message.img !== "") {
      obj.img = message.img;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.app = object.app ?? "";
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    message.channelUrl = object.channelUrl ?? "";
    message.actionUrl = object.actionUrl ?? "";
    message.img = object.img ?? "";
    message.icon = object.icon ?? "";
    return message;
  },
};

function createBaseEncryptionDetails(): EncryptionDetails {
  return { recipientDID: "", type: 0, keyIndex: 0, encryptedSecret: new Uint8Array(0) };
}

export const EncryptionDetails = {
  encode(message: EncryptionDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recipientDID !== "") {
      writer.uint32(10).string(message.recipientDID);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.keyIndex !== 0) {
      writer.uint32(24).int32(message.keyIndex);
    }
    if (message.encryptedSecret.length !== 0) {
      writer.uint32(34).bytes(message.encryptedSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recipientDID = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.keyIndex = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.encryptedSecret = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionDetails {
    return {
      recipientDID: isSet(object.recipientDID) ? globalThis.String(object.recipientDID) : "",
      type: isSet(object.type) ? encryptionTypeFromJSON(object.type) : 0,
      keyIndex: isSet(object.keyIndex) ? globalThis.Number(object.keyIndex) : 0,
      encryptedSecret: isSet(object.encryptedSecret) ? bytesFromBase64(object.encryptedSecret) : new Uint8Array(0),
    };
  },

  toJSON(message: EncryptionDetails): unknown {
    const obj: any = {};
    if (message.recipientDID !== "") {
      obj.recipientDID = message.recipientDID;
    }
    if (message.type !== 0) {
      obj.type = encryptionTypeToJSON(message.type);
    }
    if (message.keyIndex !== 0) {
      obj.keyIndex = Math.round(message.keyIndex);
    }
    if (message.encryptedSecret.length !== 0) {
      obj.encryptedSecret = base64FromBytes(message.encryptedSecret);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncryptionDetails>, I>>(base?: I): EncryptionDetails {
    return EncryptionDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncryptionDetails>, I>>(object: I): EncryptionDetails {
    const message = createBaseEncryptionDetails();
    message.recipientDID = object.recipientDID ?? "";
    message.type = object.type ?? 0;
    message.keyIndex = object.keyIndex ?? 0;
    message.encryptedSecret = object.encryptedSecret ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEncryptedNotif(): EncryptedNotif {
  return { encryptedNotif: new Uint8Array(0), sourceEnc: undefined, targetEnc: [] };
}

export const EncryptedNotif = {
  encode(message: EncryptedNotif, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptedNotif.length !== 0) {
      writer.uint32(10).bytes(message.encryptedNotif);
    }
    if (message.sourceEnc !== undefined) {
      EncryptionDetails.encode(message.sourceEnc, writer.uint32(18).fork()).join();
    }
    for (const v of message.targetEnc) {
      EncryptionDetails.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedNotif {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedNotif();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encryptedNotif = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceEnc = EncryptionDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetEnc.push(EncryptionDetails.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptedNotif {
    return {
      encryptedNotif: isSet(object.encryptedNotif) ? bytesFromBase64(object.encryptedNotif) : new Uint8Array(0),
      sourceEnc: isSet(object.sourceEnc) ? EncryptionDetails.fromJSON(object.sourceEnc) : undefined,
      targetEnc: globalThis.Array.isArray(object?.targetEnc)
        ? object.targetEnc.map((e: any) => EncryptionDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EncryptedNotif): unknown {
    const obj: any = {};
    if (message.encryptedNotif.length !== 0) {
      obj.encryptedNotif = base64FromBytes(message.encryptedNotif);
    }
    if (message.sourceEnc !== undefined) {
      obj.sourceEnc = EncryptionDetails.toJSON(message.sourceEnc);
    }
    if (message.targetEnc?.length) {
      obj.targetEnc = message.targetEnc.map((e) => EncryptionDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncryptedNotif>, I>>(base?: I): EncryptedNotif {
    return EncryptedNotif.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncryptedNotif>, I>>(object: I): EncryptedNotif {
    const message = createBaseEncryptedNotif();
    message.encryptedNotif = object.encryptedNotif ?? new Uint8Array(0);
    message.sourceEnc = (object.sourceEnc !== undefined && object.sourceEnc !== null)
      ? EncryptionDetails.fromPartial(object.sourceEnc)
      : undefined;
    message.targetEnc = object.targetEnc?.map((e) => EncryptionDetails.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
