// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.20.3
// source: tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "push";

export interface Transaction {
  /** 0 for non-value, 1 for value */
  type: number;
  /** INIT_DID, INIT_SESSION_KEY, NOTIF, EMAIL */
  category: string;
  source: string;
  recipients: string[];
  /** data is also a protobuf message, depending on tx_type */
  data: Uint8Array;
  salt: Uint8Array;
  /** f(apiToken) = v1 */
  apiToken: Uint8Array;
  signature: Uint8Array;
  /** we don't use this as of now, no native 256bits int support in protobuf */
  fee: string;
}

function createBaseTransaction(): Transaction {
  return {
    type: 0,
    category: "",
    source: "",
    recipients: [],
    data: new Uint8Array(0),
    salt: new Uint8Array(0),
    apiToken: new Uint8Array(0),
    signature: new Uint8Array(0),
    fee: "",
  };
}

export const Transaction = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).uint32(message.type);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    for (const v of message.recipients) {
      writer.uint32(34).string(v!);
    }
    if (message.data.length !== 0) {
      writer.uint32(42).bytes(message.data);
    }
    if (message.salt.length !== 0) {
      writer.uint32(50).bytes(message.salt);
    }
    if (message.apiToken.length !== 0) {
      writer.uint32(58).bytes(message.apiToken);
    }
    if (message.signature.length !== 0) {
      writer.uint32(66).bytes(message.signature);
    }
    if (message.fee !== "") {
      writer.uint32(74).string(message.fee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recipients.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.salt = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiToken = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.fee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      recipients: globalThis.Array.isArray(object?.recipients)
        ? object.recipients.map((e: any) => globalThis.String(e))
        : [],
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      salt: isSet(object.salt) ? bytesFromBase64(object.salt) : new Uint8Array(0),
      apiToken: isSet(object.apiToken) ? bytesFromBase64(object.apiToken) : new Uint8Array(0),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      fee: isSet(object.fee) ? globalThis.String(object.fee) : "",
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.recipients?.length) {
      obj.recipients = message.recipients;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.salt.length !== 0) {
      obj.salt = base64FromBytes(message.salt);
    }
    if (message.apiToken.length !== 0) {
      obj.apiToken = base64FromBytes(message.apiToken);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.fee !== "") {
      obj.fee = message.fee;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.type = object.type ?? 0;
    message.category = object.category ?? "";
    message.source = object.source ?? "";
    message.recipients = object.recipients?.map((e) => e) || [];
    message.data = object.data ?? new Uint8Array(0);
    message.salt = object.salt ?? new Uint8Array(0);
    message.apiToken = object.apiToken ?? new Uint8Array(0);
    message.signature = object.signature ?? new Uint8Array(0);
    message.fee = object.fee ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
